buildscript {
    repositories {
        maven { url = 'https://maven.removeco.de/' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'network.rs485', name: 'ForgeGradle', version: forgegradle_version
    }
}

plugins {
    id 'maven'
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version "$kotlin_version"
    id 'org.jetbrains.kotlin.plugin.serialization' version "$kotlin_version"
    id 'signing'
    id 'com.matthewprenger.cursegradle' version "$cursegradle_version"
    id 'com.github.johnrengelman.shadow' version "$shadow_version"
}
apply plugin: 'net.minecraftforge.gradle'

archivesBaseName = "logisticspipes"
group = "network.rs485"
version = "$mc_version-0.11.0"
ext.vendor = 'unknown'
ext.target = "Minecraft $mc_version Forge $forge_version"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

def ENV = System.getenv()

if (ENV.BUILD_NUMBER) {
    version = "$version.${ENV.BUILD_NUMBER}"
} else if (ENV.VERSION) {
    version = "$version.${ENV.VERSION}"
} else {
    version = "$version-SNAPSHOT"
}

if (ENV.JENKINS_URL) {
    ext.vendor = ENV.JENKINS_URL
} else if (ENV.JITPACK) {
    ext.vendor = "JitPack.io"
    group = ENV.GROUP
}

ext.sharedManifest = manifest {
    attributes(
            'FMLCorePlugin': 'logisticspipes.asm.LogisticsPipesCoreLoader',
            'FMLCorePluginContainsFMLMod': 'true',
            'FMLAT': 'lp_at.cfg',
            'Specification-Title': 'LogisticsPipes',
            'Specification-Vendor': 'RS485',
            'Specification-Version': '1',
            'Implementation-Vendor': "$vendor",
            'Implementation-Title': "${project.name}",
            'Implementation-Version': "$version",
            'Implementation-Target': "$target",
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"))
}

sourceSets {
    api {
        java {
            srcDirs = ['src/api/java']
        }
    }
    main {
        compileClasspath += api.output
        runtimeClasspath += api.output

        java {
            srcDirs += 'common'
        }
    }
    test {
        compileClasspath += api.output
        runtimeClasspath += api.output
    }
}

configurations {
    testCompileOnly.extendsFrom compileOnly
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        // cannot update to 1.5, because of https://youtrack.jetbrains.com/issue/KT-30102
        languageVersion = "1.4"
        jvmTarget = JavaVersion.VERSION_1_8
        freeCompilerArgs += "-Xjvm-default=all"
    }
}

minecraft {
    mappings channel: "$mappings_channel", version: "$mappings_version"
    accessTransformer = file("$rootDir/src/main/resources/META-INF/lp_at.cfg")

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // load LP core mod from classpath
            property 'fml.coreMods.load', 'logisticspipes.asm.LogisticsPipesCoreLoader'

            mods {
                logisticspipes {
                    sources = [sourceSets.api, sourceSets.main]
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // load LP core mod from classpath
            property 'fml.coreMods.load', 'logisticspipes.asm.LogisticsPipesCoreLoader'

            mods {
                logisticspipes {
                    sources = [sourceSets.api, sourceSets.main]
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // load LP core mod from classpath
            property 'fml.coreMods.load', 'logisticspipes.asm.LogisticsPipesCoreLoader'

            args '--mod', 'logisticspipes', '--all', '--output', file('src/generated/resources/')

            mods {
                logisticspipes {
                    sources = [sourceSets.api, sourceSets.main]
                }
            }
        }

        serverTest {
            environment 'target', 'server'
            // mimic the runServer task
            environment 'mainClass', 'net.minecraft.launchwrapper.Launch'
            environment 'MCP_TO_SRG', "$buildDir/createSrgToMcp/output.srg"
            main 'net.minecraftforge.legacydev.MainServer'
            args '--tweakClass', 'net.minecraftforge.fml.common.launcher.FMLServerTweaker'
            arg 'nogui' // without GUI
            jvmArg '-ea'
            workingDirectory project.file('run-server-test')

            // load LP core mod from classpath
            property 'fml.coreMods.load', 'logisticspipes.asm.LogisticsPipesCoreLoader'

            // put LP in test mode
            property 'logisticspipes.test', 'true'

            mods {
                logisticspipes {
                    sources = [sourceSets.api, sourceSets.main, sourceSets.test]
                }
            }
        }
    }
}

jar {
    from sourceSets.api.output
    finalizedBy 'shadowJar'

    manifest = project.manifest {
        from sharedManifest
    }
}

shadowJar {
    from sourceSets.api.output
    finalizedBy 'reobfJar'

    archiveClassifier.set('')

    dependencies {
        include(dependency(group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlin_version))
        include(dependency(group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlin_version))
        include(dependency(group: 'org.jetbrains', name: 'annotations', version: kannotations_version))
        include(dependency(group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core-jvm', version: kcoroutines_version))
        include(dependency(group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-jdk8', version: kcoroutines_version))
        include(dependency(group: 'org.jetbrains.kotlinx', name: 'kotlinx-serialization-json-jvm', version: kserialization_version))
        include(dependency(group: 'org.jetbrains.kotlinx', name: 'kotlinx-serialization-core-jvm', version: kserialization_version))
        include(dependency(group: 'com.charleskorn.kaml', name: 'kaml', version: kaml_version))
        include(dependency(group: 'org.snakeyaml', name: 'snakeyaml-engine', version: '2.3'))
    }

    relocate 'kotlin', 'logisticspipes.kotlin'
    relocate 'kotlinx', 'logisticspipes.kotlinx'
    relocate 'org.intellij', 'logisticspipes.intellij'
    relocate 'org.jetbrains', 'logisticspipes.jetbrains'
    relocate 'org.snakeyaml', 'logisticspipes.snakeyaml'

    exclude 'META-INF/versions/9/*'
    exclude 'DebugProbesKt.bin'

    manifest {
        inheritFrom sharedManifest
    }
}

task sourceJar(type: Jar) {
    from sourceSets.api.allSource
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

test {
    reports {
        html.enabled = true
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

repositories {
    maven { url = 'https://maven.removeco.de/' }
    mavenCentral()
    jcenter()
    maven {
        name = 'JitPack.io'
        url = 'https://jitpack.io'
    }
//    maven {
//        url "http://maven.shadowfacts.net/"
//    }
//    maven {
//        url = 'https://squiddev.cc/maven/'
//    }
//    maven {
//        url = "http://maven.cil.li/"
//    }
//    maven {
//        name = "buildcraft"
//        url = "https://mod-buildcraft.com/maven/"
//    }
//    maven { // JEI Bees & Thaumcraft
//        name = "CurseForge"
//        url = "https://minecraft.curseforge.com/api/maven/"
//    }
//    maven {
//        url "http://maven.amadornes.com/"
//    }
//    maven {
//        name = "storagedrawers"
//        url = "https://dl.bintray.com/jaquadro/dev/"
//    }
//    maven {
//        name = "JEI"
//        url = "https://dvs1.progwml6.com/files/maven/"
//    }
//    maven {
//        name = 'CC Tweaked'
//        url = 'https://squiddev.cc/maven/'
//    }
//    maven {
//        name = 'CodeChickenLib'
//        url = 'https://maven.covers1624.net/'
//    }
//    maven {
//        name = "k-4u fallback"
//        url = "https://modmaven.k-4u.nl"
//    }
}

dependencies {
    minecraft group: 'net.minecraftforge', name: 'forge', version: "$mc_version-$forge_version"
    apiImplementation group: 'net.minecraftforge', name: 'forge', version: "$mc_version-$forge_version"

    compileOnly group: 'org.projectlombok', name: 'lombok', version: lombok_version
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombok_version

    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlin_version
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlin_version
    implementation group: 'org.jetbrains', name: 'annotations', version: kannotations_version
    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: kcoroutines_version
    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-jdk8', version: kcoroutines_version
    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-serialization-json', version: kserialization_version
    implementation group: 'com.charleskorn.kaml', name: 'kaml', version: kaml_version

    implementation fg.deobf(group: 'codechicken', name: 'CodeChickenLib', version: '1.14.4-3.2.8.374', classifier: 'universal', transitive: false)
    compileOnly fg.deobf(group: 'mezz.jei', name: "jei-${mc_version}", version: "6.0.0.29", transitive: false)
//    compileOnly group: 'codechicken', name: 'NotEnoughItems', version: '1.12.2-2.4.3.245', classifier: 'deobf', transitive: false
//    compileOnly group: 'codechicken', name: 'EnderStorage', version: '1.12.2-2.4.6.137', classifier: 'deobf', transitive: false
    compileOnly fg.deobf(group: 'org.squiddev', name: "cc-tweaked-$mc_version", version: '1.89.2', transitive: false)

    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.4.2'
}


import net.minecraftforge.gradle.userdev.MinecraftUserRepo

import java.nio.file.Files

final nonMinecraftConfigurations = configurations.findAll { conf -> conf != configurations.minecraft }
if (!nonMinecraftConfigurations.empty) {
    final fgextension = project.getExtensions().findByName("minecraft")
    final mcrepo = new MinecraftUserRepo(project, 'net.minecraftforge', 'forge', "$mc_version-$forge_version", fgextension.getAccessTransformers(), fgextension.getMappings())
    nonMinecraftConfigurations.each {
        it.resolutionStrategy.dependencySubstitution {
            substitute module('net.minecraftforge:forge') with module(mcrepo.getDependencyString())
        }
    }
}

clean {
    // this folder is created by dependency resolution and will be created before 'clean' runs,
    // resulting in missing minecraft sources etc. Set here: https://fckaf.de/voZ
    setDelete(project.fileTree("$buildDir") {
        exclude 'fg_cache'
    })
}

tasks.withType(Test) {
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed")
    }
}

task apiJar(type: Jar, dependsOn: apiClasses) {
    from sourceSets.api.output
    from sourceSets.api.allSource
    archiveClassifier.set('api')
}

curseforge {
    apiKey = project.hasProperty('LogisticsPipes.curseForgeApiKey') ? project.findProperty("LogisticsPipes.curseForgeApiKey") : '0'
    project {
        id = "232838"
        changelog = project.hasProperty('changelog') ? project.findProperty('changelog') : ''
        releaseType = 'alpha'
        relations {
            requiredDependency 'codechicken-lib-1-8'
        }

        mainArtifact(shadowJar) {
            displayName = "Logistics Pipes $project.version"
        }
    }
}

artifacts {
    archives apiJar
    archives shadowJar
    archives sourceJar
}

task enableSigningTasks {
    doFirst {
        tasks.withType(Sign) {
            enabled = true
        }
    }
}

signing {
    useGpgCmd()
    sign apiJar
    sign shadowJar
    sign sourceJar
}

task sign {
    dependsOn enableSigningTasks
    dependsOn(tasks.withType(Sign))
}

tasks.withType(Sign) {
    // disable signing by default
    enabled = false
    mustRunAfter enableSigningTasks
    ext.useJarsigner = (name != "signSourceJar") // dont sign source jar, it doesn't have classes
}

gradle.taskGraph.whenReady { TaskExecutionGraph taskGraph ->
    taskGraph.allTasks.each { Task task ->
        if (task instanceof Sign && task.useJarsigner) {
            task.doFirst {
                inputs.each { TaskInputs taskInputs ->
                    taskInputs.files.each { File file ->
                        // see https://ant.apache.org/manual/Tasks/signjar.html for arguments
                        // ForgeGradle also uses ant.signjar: https://fckaf.de/DCw
                        ant.signjar(
                                jar: file,
                                alias: "1",
                                storetype: findProperty("LogisticsPipes.storetype"),
                                keystore: findProperty("LogisticsPipes.keystore"),
                                storepass: findProperty("LogisticsPipes.storepass"),
                                verbose: "true",
                                preservelastmodified: "true"
                        )
                    }
                }
            }
        } else if (task.name.startsWith('prepareRunServerTest')) {
            task.doFirst {
                final def serverTestHome = projectDir.toPath().resolve('run-server-test')
                if (findProperty("acceptMinecraftServerEula") == 'true') {
                    def eulaFile = serverTestHome.resolve('eula.txt')
                    Files.deleteIfExists(eulaFile)
                    eulaFile.write('eula=true')
                }

                final serverProperties = serverTestHome.resolve('server.properties')
                def properties = new Properties()
                try {
                    serverProperties.withReader {reader ->
                        properties.load(reader)
                    }
                } catch (IOException e) {
                    println "Error reading $serverProperties"
                    e.printStackTrace()
                }
                properties.setProperty('spawn-monsters', 'false')
                properties.setProperty('spawn-npcs', 'false')
                properties.setProperty('spawn-animals', 'false')
                properties.setProperty('generate-structures', 'false')
                properties.setProperty('online-mode', 'false')
                properties.setProperty('gamemode', '1')
                properties.setProperty('level-type', 'FLAT')
                properties.setProperty('generator-settings', 'minecraft:bedrock,3*minecraft:stone,52*minecraft:sandstone;minecraft:desert;')
                properties.setProperty('motd', 'Logistics Pipes Test Server')
                //properties.setProperty('max-tick-time', '0') // for debugging the server
                try {
                    serverProperties.withWriter {writer ->
                        properties.store(writer, null)
                    }
                } catch (IOException e) {
                    println "Error reading $serverProperties"
                    e.printStackTrace()
                }
            }
        }
    }
}

class DownloadTask extends DefaultTask {
    String url

    @OutputFile
    final RegularFileProperty outputFile = project.objects.fileProperty()

    @TaskAction
    void download() {
        ant.get(src: url, dest: outputFile.get().asFile)
    }
}

task downloadLanguage(type: DownloadTask) {
    url = "https://github.com/RS485/LogisticsPipes-Language/archive/master.zip"
    outputFile.set(layout.buildDirectory.file("language.zip"))
}

task languageMain(dependsOn: downloadLanguage, type: Copy) {
    from zipTree(downloadLanguage.outputFile)
    into "${sourceSets.main.getOutput().resourcesDir}/assets/logisticspipes/lang/"
    include "*/*.lang"

    includeEmptyDirs false
    eachFile { FileCopyDetails fcd ->
        fcd.relativePath = new RelativePath(!fcd.isDirectory(), fcd.relativePath.segments.drop(1))
    }
}

task languageBook(dependsOn: downloadLanguage, type: Copy) {
    from zipTree(downloadLanguage.outputFile)
    into "${sourceSets.main.getOutput().resourcesDir}/assets/logisticspipes/book/"
    include "*/book/"

    includeEmptyDirs false
    eachFile { FileCopyDetails fcd ->
        fcd.relativePath = new RelativePath(!fcd.isDirectory(), fcd.relativePath.segments.drop(2))
    }
}

task language(dependsOn: [languageMain, languageBook], type: Copy) {
    processResources.dependsOn language
}

install.repositories.mavenInstaller.pom.whenConfigured { pom ->
    pom.dependencies.clear()
}

tasks.named('wrapper') {
    gradleVersion = '6.8.3'
    distributionType = Wrapper.DistributionType.ALL
}

tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

task integrationTests(dependsOn: ['prepareRunServerTest'], type: Exec) {
    workingDir projectDir

    commandLine "$projectDir/gradlew"
    args 'runServerTest'
    ignoreExitValue = true

    standardOutput = new ByteArrayOutputStream()
    errorOutput = new ByteArrayOutputStream()

    doLast {
        final output = standardOutput.toString()
        final start = output.indexOf('[STARTING LOGISTICSPIPES TESTS]')
        if (start == -1) throw new GradleException("Cannot find LP test start:\n${output}")
        def testOutput = output.substring(start)
        if (testOutput.contains('[FAILED]')) {
            throw new GradleException("Error in LP Tests:\n${testOutput}")
        } else {
            testOutput.eachLine {
                if (it.contains('[PASSED]')) println(it)
            }
        }
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
//def reobfFile = file("$buildDir/reobfJar/output.jar")
//def reobfArtifact = artifacts.add('default', reobfFile) {
//    type 'jar'
//    builtBy 'reobfJar'
//}
//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            artifact reobfArtifact
//        }
//    }
//    repositories {
//        maven {
//            url "file:///${project.projectDir}/mcmodsrepo"
//        }
//    }
//}
