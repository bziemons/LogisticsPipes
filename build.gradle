buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "gradle plugins"
            url = "https://plugins.gradle.org/m2/"
        }
        maven {
            name = "RS485 Cache"
            url = "https://www.rs485.network/maven-cache/"
        }
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: forgegradle_version
        classpath group: 'gradle.plugin.com.matthewprenger', name: 'CurseGradle', version: cursegradle_version
        classpath group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: kotlin_version
        classpath group: 'org.jetbrains.kotlin', name: 'kotlin-serialization', version: kotlin_version
        classpath group: 'com.github.jengelman.gradle.plugins', name: 'shadow', version: shadow_version
    }
}

apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlinx-serialization'
apply plugin: 'eclipse'
apply plugin: 'signing'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'net.minecraftforge.gradle'

archivesBaseName = "logisticspipes"
group = "network.rs485"
version = "0.10.3"
ext.vendor = "unknown"
ext.target = "Forge $forge_version"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

def ENV = System.getenv()

if (ENV.BUILD_NUMBER) {
    version = "$version.${ENV.BUILD_NUMBER}"
} else if (ENV.VERSION) {
    version = "$version.${ENV.VERSION}"
} else {
    version = "$version-SNAPSHOT"
}

if (ENV.JENKINS_URL) {
    ext.vendor = ENV.JENKINS_URL
} else if (ENV.JITPACK) {
    ext.vendor = "JitPack.io"
    group = ENV.GROUP
}

ext.sharedManifest = manifest {
    attributes(
            'FMLCorePlugin': 'logisticspipes.asm.LogisticsPipesCoreLoader',
            'FMLCorePluginContainsFMLMod': 'true',
            'FMLAT': 'lp_at.cfg',
            'Specification-Title': 'LogisticsPipes',
            'Specification-Vendor': 'RS485',
            'Specification-Version': '1',
            'Implementation-Vendor': "$vendor",
            'Implementation-Title': "${project.name}",
            'Implementation-Version': "$version",
            'Implementation-Target': "$target",
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"))
}

sourceSets {
    api {
        compileClasspath += configurations.compileClasspath
        runtimeClasspath += configurations.runtimeClasspath
        java {
            srcDirs = ['src/api/java']
        }
    }
    dummy {
        java {
            srcDirs = ['dummy/src/main/java']
        }
    }
    main {
        compileClasspath += dummy.output
        compileClasspath += api.output
        runtimeClasspath += api.output

        java {
            srcDirs += 'common'
        }
        resources {
            srcDirs += 'resources'
        }
    }
    test {
        compileClasspath += dummy.output
        compileClasspath += api.output
        runtimeClasspath += api.output
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        languageVersion = "1.4"
        jvmTarget = JavaVersion.VERSION_1_8
        freeCompilerArgs += "-Xjvm-default=enable"
    }
}

minecraft {
    mappings channel: 'snapshot', version: "$mappings_version"
    accessTransformer = file("$rootDir/resources/META-INF/lp_at.cfg")

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // load LP core mod from classpath
            property 'fml.coreMods.load', 'logisticspipes.asm.LogisticsPipesCoreLoader'

            mods {
                logisticspipes {
                    sources = [sourceSets.api, sourceSets.main]
                }
            }
        }

        server {
            workingDirectory project.file('run-server')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // load LP core mod from classpath
            property 'fml.coreMods.load', 'logisticspipes.asm.LogisticsPipesCoreLoader'

            mods {
                logisticspipes {
                    sources = [sourceSets.api, sourceSets.main]
                }
            }
        }
    }
}

jar {
    from sourceSets.api.output
    finalizedBy 'reobfJar'

    manifest = project.manifest {
        from sharedManifest
    }
}

shadowJar {
    from sourceSets.api.output
    finalizedBy 'reobfJar'

    archiveClassifier.set('')

    dependencies {
        include(dependency(group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlin_version))
        include(dependency(group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlin_version))
        include(dependency(group: 'org.jetbrains', name: 'annotations', version: kannotations_version))
        include(dependency(group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: kcoroutines_version))
        include(dependency(group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-jdk8', version: kcoroutines_version))
        include(dependency(group: 'org.jetbrains.kotlinx', name: 'kotlinx-serialization-json', version: kserialization_version))
    }

    relocate 'kotlin', 'logisticspipes.kotlin'
    relocate 'kotlinx', 'logisticspipes.kotlinx'
    relocate 'org.intellij', 'logisticspipes.intellij'
    relocate 'org.jetbrains', 'logisticspipes.jetbrains'

    exclude 'META-INF/versions/9/*'
    exclude 'DebugProbesKt.bin'

    manifest {
        inheritFrom sharedManifest
    }
}

task sourceJar(type: Jar) {
    from sourceSets.api.allSource
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

test {
    reports {
        html.enabled = true
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

repositories {
    jcenter()
    maven {
        name = "RS485 Cache"
        url = "https://www.rs485.network/maven-cache/"
    }
    maven {
        name = 'JitPack.io'
        url = 'https://jitpack.io'
    }
    maven {
        name = "forge"
        url = "https://files.minecraftforge.net/maven"
    }
    maven {
        url "http://maven.shadowfacts.net/"
    }
    maven {
        url = "https://cc.crzd.me/maven/"
    }
    maven {
        url = "http://maven.cil.li/"
    }
    maven {
        name = "buildcraft"
        url = "https://mod-buildcraft.com/maven/"
    }
    maven { // JEI Bees & Thaumcraft
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        url "http://maven.amadornes.com/"
    }
    maven {
        name = "storagedrawers"
        url = "https://dl.bintray.com/jaquadro/dev/"
    }
}

dependencies {
    minecraft group: 'net.minecraftforge', name: 'forge', version: forge_version
    apiImplementation group: 'net.minecraftforge', name: 'forge', version: forge_version
    dummyImplementation group: 'net.minecraftforge', name: 'forge', version: forge_version

    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.12'
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.12'

    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlin_version
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlin_version
    implementation group: 'org.jetbrains', name: "annotations", version: kannotations_version
    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: kcoroutines_version
    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-jdk8', version: kcoroutines_version
    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-serialization-json', version: kserialization_version
    implementation group: 'com.github.RS485', name: 'CodeChickenLib', version: '5901b4c6f4af70e6ef2dbe194bf7e0e097bb375c', classifier: 'deobf'

    compileOnly group: 'mezz.jei', name: 'jei_1.12.2', version: '4.15.0.293'
    compileOnly group: 'MCMultiPart2', name: 'MCMultiPart', version: '2.5.3', classifier: 'deobf'
    compileOnly group: 'com.mod-buildcraft', name: 'buildcraft-all', version: '7.99.24.6', transitive: false
    compileOnly group: 'net.industrial-craft', name: 'industrialcraft-2', version: '2.8.170-ex112', classifier: 'api'
    compileOnly group: 'codechicken', name: 'NotEnoughItems', version: '1.12.2-2.4.3.245', classifier: 'deobf', transitive: false
    compileOnly group: 'codechicken', name: 'EnderStorage', version: '1.12.2-2.4.6.137', classifier: 'deobf', transitive: false
    compileOnly group: 'li.cil.oc', name: 'OpenComputers', version: 'MC1.12.2-1.7.5.205', classifier: 'api'
    compileOnly group: 'appeng', name: 'appliedenergistics2', version: 'rv6-stable-7', classifier: 'api', transitive: false
    compileOnly group: 'cofh', name: 'CoFHCore', version: '1.12.2-4.6.3.27', classifier: 'deobf', transitive: false
    compileOnly group: 'cofh', name: 'RedstoneFlux', version: '1.12-2.1.0.7', classifier: 'deobf', transitive: false
    compileOnly group: 'cofh', name: 'CoFHWorld', version: '1.12.2-1.2.0.5', classifier: 'deobf', transitive: false
    compileOnly group: 'cofh', name: 'ThermalDynamics', version: '1.12.2-2.5.5.21', classifier: 'deobf', transitive: false
    compileOnly group: 'cofh', name: 'ThermalFoundation', version: '1.12.2-2.6.3.27', classifier: 'deobf', transitive: false
    compileOnly group: 'cofh', name: 'ThermalExpansion', version: '1.12.2-5.5.4.43', classifier: 'deobf', transitive: false
    compileOnly group: 'dan200.computercraft', name: 'ComputerCraft', version: '1.80pr1-build5', transitive: false
    compileOnly group: 'com.jaquadro.minecraft.storagedrawers', name: 'StorageDrawers', version: '1.12.2-5.4.2', transitive: false

    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.4.2'
}

project.afterEvaluate {
    final minecraftConf = configurations.minecraft

    configurations.each { Configuration conf ->
        if (conf != minecraftConf) {
            conf.dependencies.each { Dependency dep ->
                if (dep.group == 'net.minecraftforge' && dep.name == 'forge') {
                    conf.dependencies.remove(dep)
                    minecraftConf.dependencies.each { Dependency minecraftDep ->
                        conf.dependencies.add(dependencies.create(group: minecraftDep.group, name: minecraftDep.name, version: minecraftDep.version))
                    }
                }
            }
        }
    }
}

clean {
    // this folder is created by dependency resolution and will be created before 'clean' runs,
    // resulting in missing minecraft sources etc. Set here: https://fckaf.de/voZ
    setDelete(project.fileTree("$buildDir") {
        exclude 'fg_cache'
    })
}

tasks.withType(Test) {
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed")
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    from sourceSets.api.output
    archiveClassifier.set('deobf')

    manifest = project.manifest {
        from sharedManifest
    }
}

task apiJar(type: Jar, dependsOn: apiClasses) {
    from sourceSets.api.output
    from sourceSets.api.allSource
    archiveClassifier.set('api')
}

curseforge {
    apiKey = project.hasProperty('LogisticsPipes.curseForgeApiKey') ? project.findProperty("LogisticsPipes.curseForgeApiKey") : '0'
    project {
        id = "232838"
        changelog = project.hasProperty('changelog') ? project.findProperty('changelog') : ''
        releaseType = 'beta'
        relations {
            requiredDependency 'codechicken-lib-1-8'
        }

        mainArtifact(shadowJar) {
            displayName = "Logistics Pipes $project.version"
        }
    }
}

artifacts {
    archives apiJar
    archives shadowJar
    archives deobfJar
    archives sourceJar
}

task enableSigningTasks {
    doFirst {
        tasks.withType(Sign) {
            enabled = true
        }
    }
}

signing {
    useGpgCmd()
    sign apiJar
    sign shadowJar
    sign deobfJar
    sign sourceJar
}

task sign {
    dependsOn enableSigningTasks
    dependsOn(tasks.withType(Sign))
}

tasks.withType(Sign) {
    // disable signing by default
    enabled = false
    mustRunAfter enableSigningTasks
    ext.useJarsigner = (name != "signSourceJar") // dont sign source jar, it doesn't have classes
}

gradle.taskGraph.whenReady { TaskExecutionGraph taskGraph ->
    taskGraph.allTasks.each { Task task ->
        if (task instanceof Sign && task.useJarsigner) {
            task.doFirst {
                inputs.each { TaskInputs taskInputs ->
                    taskInputs.files.each { File file ->
                        // see https://ant.apache.org/manual/Tasks/signjar.html for arguments
                        // ForgeGradle also uses ant.signjar: https://fckaf.de/DCw
                        ant.signjar(
                                jar: file,
                                alias: "1",
                                storetype: findProperty("LogisticsPipes.storetype"),
                                keystore: findProperty("LogisticsPipes.keystore"),
                                storepass: findProperty("LogisticsPipes.storepass"),
                                verbose: "true",
                                preservelastmodified: "true"
                        )
                    }
                }
            }
        }
    }
}

class DownloadTask extends DefaultTask {
    String url

    @OutputFile
    final RegularFileProperty outputFile = project.objects.fileProperty()

    @TaskAction
    void download() {
        ant.get(src: url, dest: outputFile.get().asFile)
    }
}

task downloadLanguage(type: DownloadTask) {
    url = "https://github.com/RS485/LogisticsPipes-Language/archive/master.zip"
    outputFile.set(layout.buildDirectory.file("language.zip"))
}

task languageMain(dependsOn: downloadLanguage, type: Copy) {
    from zipTree(downloadLanguage.outputFile)
    into "${sourceSets.main.getOutput().resourcesDir}/assets/logisticspipes/lang/"
    include "*/*.lang"

    includeEmptyDirs false
    eachFile { FileCopyDetails fcd ->
        fcd.relativePath = new RelativePath(!fcd.isDirectory(), fcd.relativePath.segments.drop(1))
    }
}

task languageBook(dependsOn: downloadLanguage, type: Copy) {
    from zipTree(downloadLanguage.outputFile)
    into "${sourceSets.main.getOutput().resourcesDir}/assets/logisticspipes/book/"
    include "*/book/"

    includeEmptyDirs false
    eachFile { FileCopyDetails fcd ->
        fcd.relativePath = new RelativePath(!fcd.isDirectory(), fcd.relativePath.segments.drop(2))
    }
}

task language(dependsOn: [languageMain, languageBook], type: Copy) {
    processResources.dependsOn language
}

install.repositories.mavenInstaller.pom.whenConfigured { pom ->
    pom.dependencies.clear()
}

tasks.named('wrapper') {
    gradleVersion = '5.3.1'
    distributionType = Wrapper.DistributionType.ALL
}

tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}
